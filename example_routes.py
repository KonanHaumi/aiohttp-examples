
"""
Каждый маршрут связывается с отдельной функцией-обработчиком (about и handle), которая возвращает свой собственный текстовый ответ.

Массив маршрутов:
• app.add_routes([...]): Мы добавили два маршрута в приложение. Это массив (список) маршрутов, каждый из которых связывает определенный URL-путь (например, /about) с функцией-обработчиком (например, about).

web.Response:
• web.Response(text="..."): Этот метод создает простой HTTP-ответ с указанным текстом.

"""

import aiohttp
from aiohttp import web

# создаем базовый обработчик для корневого маршрута "/"
async def handle (request) :
    return web.Response(text ='Hello word!!!, Это стартовая страница')

# создаем маршрут для ссылки example
async def example (request):
    return web.Response(text ='Пример добавления нового маршрута' )

# создаем приложение aiohttp
app = web.Application ()

# Добавляем маршрут, указываем, что за корневой маршрут отвечает функция handle и так далее
app.add_routes([
    web.get('/', handle),
    web.get('/example', example)
])

# Запускаем веб сервер
if __name__ == '__main__':
    web.run_app(app, host='127.0.0.1', port=8000)

"""
Что происходит при запуске:

• Когда вы запускаете сервер и заходите на адрес http://localhost:8080/, вы увидите сообщение “Hello, World!”.
• Если зайти на http://localhost:8080/example, сервер вернет другой текст.

"""